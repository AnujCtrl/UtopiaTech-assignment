{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as L from 'leaflet';\nlet PanelListComponent = class PanelListComponent {\n  constructor(panelService) {\n    this.panelService = panelService;\n    this.panelList = [];\n    this.selectedPanel = null;\n    this.showMapPanel = false;\n  }\n  ngOnInit() {\n    this.fetchPanelList();\n  }\n  fetchPanelList() {\n    const orgId = 3;\n    this.panelService.getPanelList(orgId).subscribe(response => {\n      if (response.statusCode === 200) {\n        this.panelList = response.result;\n      }\n    }, error => {\n      console.error('Error fetching panel list:', error);\n    });\n  }\n  ngAfterViewInit() {\n    const map = L.map('map').setView([this.selectedPanel.Lat, this.selectedPanel.Lng], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\n      maxZoom: 18\n    }).addTo(map);\n    L.marker([this.selectedPanel.Lat, this.selectedPanel.Lng]).addTo(map).bindPopup('Panel Location');\n  }\n  openSidebar(panel) {\n    this.selectedPanel = panel;\n  }\n  openMapPanel(panel) {\n    this.selectedPanel = panel;\n    // this.showMapPanel = true;\n  }\n\n  closeSidebar() {\n    this.selectedPanel = null;\n    this.showMapPanel = false;\n  }\n};\nPanelListComponent = __decorate([Component({\n  selector: 'app-panel-list',\n  templateUrl: './panel-list.component.html',\n  styleUrls: ['./panel-list.component.css']\n})], PanelListComponent);\nexport { PanelListComponent };","map":{"version":3,"names":["Component","L","PanelListComponent","constructor","panelService","panelList","selectedPanel","showMapPanel","ngOnInit","fetchPanelList","orgId","getPanelList","subscribe","response","statusCode","result","error","console","ngAfterViewInit","map","setView","Lat","Lng","tileLayer","attribution","maxZoom","addTo","marker","bindPopup","openSidebar","panel","openMapPanel","closeSidebar","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\anujp\\Documents\\GitHub\\UtopiaTech-assignment\\Task 2\\panel-app\\src\\app\\panel-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { PanelService } from './panel.service';\r\nimport * as L from 'leaflet';\r\n\r\n@Component({\r\n  selector: 'app-panel-list',\r\n  templateUrl: './panel-list.component.html',\r\n  styleUrls: ['./panel-list.component.css'],\r\n})\r\nexport class PanelListComponent implements OnInit {\r\n  panelList: any[] = [];\r\n\r\n  constructor(private panelService: PanelService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetchPanelList();\r\n  }\r\n\r\n  fetchPanelList(): void {\r\n    const orgId = 3;\r\n    this.panelService.getPanelList(orgId).subscribe(\r\n      (response) => {\r\n        if (response.statusCode === 200) {\r\n          this.panelList = response.result;\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching panel list:', error);\r\n      }\r\n    );\r\n  }\r\n  selectedPanel: any = null;\r\n  showMapPanel: boolean = false;\r\n  \r\n  ngAfterViewInit() {\r\n    const map = L.map('map').setView(\r\n      [this.selectedPanel.Lat, this.selectedPanel.Lng],\r\n      13\r\n    );\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution:\r\n        'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors',\r\n      maxZoom: 18,\r\n    }).addTo(map);\r\n\r\n    L.marker([this.selectedPanel.Lat, this.selectedPanel.Lng])\r\n      .addTo(map)\r\n      .bindPopup('Panel Location');\r\n  }\r\n  openSidebar(panel: any) {\r\n    this.selectedPanel = panel;\r\n  }\r\n\r\n  openMapPanel(panel: any) {\r\n    this.selectedPanel = panel;\r\n    // this.showMapPanel = true;\r\n  }\r\n\r\n  closeSidebar() {\r\n    this.selectedPanel = null;\r\n    this.showMapPanel = false;\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,OAAO,KAAKC,CAAC,MAAM,SAAS;AAO5B,IAAaC,kBAAkB,GAA/B,MAAaA,kBAAkB;EAG7BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAFhC,KAAAC,SAAS,GAAU,EAAE;IAqBrB,KAAAC,aAAa,GAAQ,IAAI;IACzB,KAAAC,YAAY,GAAY,KAAK;EApBoB;EAEjDC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAcA,CAAA;IACZ,MAAMC,KAAK,GAAG,CAAC;IACf,IAAI,CAACN,YAAY,CAACO,YAAY,CAACD,KAAK,CAAC,CAACE,SAAS,CAC5CC,QAAQ,IAAI;MACX,IAAIA,QAAQ,CAACC,UAAU,KAAK,GAAG,EAAE;QAC/B,IAAI,CAACT,SAAS,GAAGQ,QAAQ,CAACE,MAAM;;IAEpC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CACF;EACH;EAIAE,eAAeA,CAAA;IACb,MAAMC,GAAG,GAAGlB,CAAC,CAACkB,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAC9B,CAAC,IAAI,CAACd,aAAa,CAACe,GAAG,EAAE,IAAI,CAACf,aAAa,CAACgB,GAAG,CAAC,EAChD,EAAE,CACH;IACDrB,CAAC,CAACsB,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EACT,yFAAyF;MAC3FC,OAAO,EAAE;KACV,CAAC,CAACC,KAAK,CAACP,GAAG,CAAC;IAEblB,CAAC,CAAC0B,MAAM,CAAC,CAAC,IAAI,CAACrB,aAAa,CAACe,GAAG,EAAE,IAAI,CAACf,aAAa,CAACgB,GAAG,CAAC,CAAC,CACvDI,KAAK,CAACP,GAAG,CAAC,CACVS,SAAS,CAAC,gBAAgB,CAAC;EAChC;EACAC,WAAWA,CAACC,KAAU;IACpB,IAAI,CAACxB,aAAa,GAAGwB,KAAK;EAC5B;EAEAC,YAAYA,CAACD,KAAU;IACrB,IAAI,CAACxB,aAAa,GAAGwB,KAAK;IAC1B;EACF;;EAEAE,YAAYA,CAAA;IACV,IAAI,CAAC1B,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,YAAY,GAAG,KAAK;EAC3B;CACD;AArDYL,kBAAkB,GAAA+B,UAAA,EAL9BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWlC,kBAAkB,CAqD9B;SArDYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}